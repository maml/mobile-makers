3.1
------------------------------------------------------------------------------------

//
//  main.m
//  NumSecondsInTenYears
//
//  Created by Matthew Loseke on 9/15/13.
//  Copyright (c) 2013 Matthew Loseke. All rights reserved.
//

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[])
{

    @autoreleasepool {
        
        int seconds = 60;
        int minutes = 60;
        int hours = 24;
        int days = 365;
        
        int secondsInTenYears = 10 * seconds * minutes * hours * days;

        NSLog(@"There are %i seconds in 10 years\n", secondsInTenYears);
    }
    
    return 0;
}

3.2
-----------------------------------------------------------------------------------

//
//  main.m
//  CheckDayOfWeek
//
//  Created by Matthew Loseke on 9/15/13.
//  Copyright (c) 2013 Matthew Loseke. All rights reserved.
//

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[])
{

    @autoreleasepool {
        
        // let's let start our week out with monday being 1 and ending up with sunday being 7
        int day = 6;
        
        if ((day == 6) || (day == 7)) {
            NSLog(@"Have a nice weekend!");
        } else {
            NSLog(@"I hope you're having a good week!");
        }
        
    }
    
    return 0;
}

3.3
_________________________________________________________________________________
//
//  main.m
//  HurricaneCategory
//
//  Created by Matthew Loseke on 9/15/13.
//  Copyright (c) 2013 Matthew Loseke. All rights reserved.
//

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[])
{

    @autoreleasepool {
        
        int HurricaneCategory = 2;
        
        switch (HurricaneCategory) {
            case 1:
                NSLog(@"Hurricane is a category 1");
                break;
            case 2:
                NSLog(@"Hurricane is a category 2");
                break;
            case 3:
                NSLog(@"Hurricane is a category 3");
                break;
            case 4:
                NSLog(@"Hurricane is a category 4");
                break;
            case 5:
                NSLog(@"Hurricane is a category 5");
                break;
            default:
                break;
        }

    }
    return 0;
}

3.5 List the 6 types of operators described in this video. Provide their name, a description
of their meaning, and the syntax you would use to execute them. What code snippet does
the ternary operator replace?

Arithmetic operators
+ addition adds things together a + b
- subtraction  - subtracts things a - b
* multiplication - multiplies things a * b
/ division divides things a / b
+= plus equals, a += b equiv to a = a + b
-= minus equals, a -= b equiv to a = a - b
*= times equals, a *= b equiv to a = a * b
/= divide equals, a /= b equic to a = a / b
= assignment operator, assigns a value, a = 5

Comparison
== equality, a == b
!= non equality, a != b
> greater than, a > b
< less than, a < b
<= less than or equal, a <= b
>= greater than or equal, a >= b

Logical
&& logical AND, a && b
|| logical OR, a || b

Modulus
% modulus operator, returns the remainder, a % b

Increment / Decrement
++ increments by 1, a++
-- decrements by 1, a--

Ternary
condition ? true : false, ternary operator, returns true case if conditions evaluates to true, otherwise false
(2 == 3) ? true : false would return false
assignments can be used also

it replaces . . .

if (a == b) {
	// do somethings
} else {
	// do somethings else
}

3.6 CHALLENGE: Think of a scenario while using a mobile app that might require you
to use a "continue" statement in the middle of a loop.

You have a collection of all Users of your app and you want to loop through them and send an email
if the current day is the same as their birthday

// psuedo code
const char* collectionOfUsers = QueryDBForUsers();

for (i = 0; i < strlen(collectionOfUsers); i++) {
	if (collectionOfUsers[i].get('birthDate') == currentDay) {
		sendHappyBirthdayEmail(collectionOfUsers[i]);
	}
}

3.7 What is a function? What is a function prototype? What are the purposes of each?
What are the rules for when and how you can call a function?

"A function is a chunck of related code, wrapped up and given a name."

A prototype is a description of the function, letting the compiler know that it 
exists, and details what it returns and what it accepts.

Prototypes are useful for when you want to reference a function before it's been formally
defined in your code. Just define the prototype before the first reference and the compiler
should be happy. The function proper is for defining what it actually does.
